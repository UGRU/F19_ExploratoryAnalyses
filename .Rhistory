#install.packages("skimr", dependencies = TRUE)
library(skimr)
install.packages("skimr", dependencies = TRUE)
#install.packages("skimr", dependencies = TRUE)
library(skimr)
data("iris")
summary(iris)
summary(iris$Sepal.Length)
summary(iris$Species)
as_tibble(iris)
skim(iris) ## waaaay more information than summary
data("iris")
summary(iris)
skim(iris) ## waaaay more information than summary
skim(iris) %>%
skimr::kable()  #a bit of nicer format
iris %>%
dplyr::group_by(Species) %>%
skim()
iris
summary(iris)
as_tibble(iris)
library(tidyverse)
as_tibble(iris)
skim(iris) ## waaaay more information than summary
eda
iris %>%
.[!complete.cases(.)]
iris2 = iris
iris2[2,4] == NA
iris2
iris2[2,4] = NA
iris %>%
.[!complete.cases(.)]
iris2 %>%
.[!complete.cases(.)]
iris2 %>%
.[!complete.cases(.), ]
install.packages("dataMaid")
# Data validity - 0s, outliers, invalid values
eda %>% dataMaid::check()
# Data validity - 0s, outliers, invalid values
iris %>% dataMaid::check()
# Univariate data validity - 0s, outliers, invalid values
iris2 %>% dataMaid::check()
iris2 %>%
dataMaid::visualize()
# Multivariate outliers
eda %>% MASS::cov.mcd(., quantile.used = nrow(.) * 0.75) %>%
mahalanobis(eda, .$center, .$cov) %>%
which(. > (qchisq(p = 1 - 0.001, df = ncol(eda))))
# Multivariate outliers
iris %>% MASS::cov.mcd(., quantile.used = nrow(.) * 0.75) %>%
mahalanobis(iris, .$center, .$cov) %>%
which(. > (qchisq(p = 1 - 0.001, df = ncol(iris))))
iris %>% MASS::cov.mcd(., quantile.used = nrow(.) * 0.75)
MASS::cov.mcd
# Multivariate outliers
iris[,1:3] %>% MASS::cov.mcd(., quantile.used = nrow(.) * 0.75) %>%
mahalanobis(iris, .$center, .$cov) %>%
which(. > (qchisq(p = 1 - 0.001, df = ncol(iris[,1:3]))))
iris[,1:3]
iris[,1:3] %>% MASS::cov.mcd(., quantile.used = nrow(.) * 0.75)
# Multivariate outliers
iris[,1:3] %>% MASS::cov.mcd(., quantile.used = nrow(.) * 0.75) %>%
mahalanobis(iris[,1:3], .$center, .$cov) %>%
which(. > (qchisq(p = 1 - 0.001, df = ncol(iris[,1:3]))))
iris[,1:3] %>% MASS::cov.mcd(., quantile.used = nrow(.) * 0.75) %>%
mahalanobis(iris[,1:3], .$center, .$cov)
iris[,1:3] %>% MASS::cov.mcd(., quantile.used = nrow(.) * 0.75)
iris[,1:3] %>% MASS::cov.mcd(., quantile.used = nrow(.) * 0.75) %>%
mahalanobis(iris[,1:3], .$center, .$cov)
mahalanobis
traceback()
iris3
output75 <- cov.mcd(iris[,1:4], quantile.used = nrow(iris[,1:4])*.75)
output75 <- MASS::cov.mcd(iris[,1:4], quantile.used = nrow(iris[,1:4])*.75)
output75
mhmcd75 <- mahalanobis(iris[,1:4], output75$center, output75$cov)
mhmcd75
cutoff <- (qchisq(p = 1 - 0.001, df = ncol(iris[,1:4])))
names_outlier_MCD75 <- which(mhmcd75 > cutoff)
names_outlier_MCD75
excluded_mcd75 <- names_outlier_MCD75
data_clean_mcd <- iris[,1:4][-excluded_mcd75, ]
iris[,1:4][excluded_mcd75, ]
excluded_mcd75
names_outlier_MCD75
iris[,1:4] %>%  MASS::cov.mcd(., quantile.used = nrow(.)*.75) %>%
mahalanobis(iris[,1:4], .$center, .$cov)
cutoff <-
names_outlier_MCD75 <- which(mhmcd75 > (qchisq(p = 1 - 0.001, df = ncol(iris[,1:4]))))
dfMVoutlier <- MASS::cov.mcd(iris[,1:4], quantile.used = nrow(iris[,1:4])*.75)
dfMVoutlier <- iris[,1:4] %>% MASS::cov.mcd(., quantile.used = nrow(.)*.75)
dfMVoutlier <- iris[,1:4] %>% MASS::cov.mcd(., quantile.used = nrow(.)*.75)
mhmcd75 <- mahalanobis(iris[,1:4], dfMVoutlier$center, dfMVoutlier$cov)
mhmcd75 <- iris[, 1:4] %>%
mahalanobis(., dfMVoutlier$center, dfMVoutlier$cov) %>%
which(. > (qchisq(p = 1 - 0.001, df = ncol(iris[,1:4]))))
mhmcd75 <- iris[, 1:4] %>%
mahalanobis(., dfMVoutlier$center, dfMVoutlier$cov)
iris[, 1:4] %>%
mahalanobis(., dfMVoutlier$center, dfMVoutlier$cov)
qchisq(p = 1 - 0.001, df = ncol(iris[,1:4])))
qchisq(p = 1 - 0.001, df = ncol(iris[,1:4]))
iris[, 1:4] %>%
mahalanobis(., dfMVoutlier$center, dfMVoutlier$cov)
qchisq(p = 1 - 0.001, df = ncol(iris[,1:4]))
iris[, 1:4] %>%
mahalanobis(., dfMVoutlier$center, dfMVoutlier$cov) %>%
which(. > (qchisq(p = 1 - 0.001, df = ncol(iris[,1:4]))))
1:5 %>% which(. > 3)
vcMVoutlier <- iris[, 1:4] %>%
which(mahalanobis(., dfMVoutlier$center, dfMVoutlier$cov) >
(qchisq(p = 1 - 0.001, df = ncol(iris[,1:4]))))
vcMVoutlier <- iris[, 1:4] %>%
which(mahalanobis(., dfMVoutlier$center, dfMVoutlier$cov) > 5)
iris[, 1:4] %>%
which(mahalanobis(., dfMVoutlier$center, dfMVoutlier$cov) > 5)
iris[, 1:4] %>%
mahalanobis(., dfMVoutlier$center, dfMVoutlier$cov)
dfMVoutlier <- iris[, 1:4] %>%
mahalanobis(., dfMVoutlier$center, dfMVoutlier$cov)
which(dfMVoutlier > (qchisq(p = 1 - 0.001, df = ncol(iris[,1:4]))))
eda
eda = iris[,1:4]
dfMVoutlier <- eda %>% MASS::cov.mcd(., quantile.used = nrow(.)*.75)
dfMVoutlier <- eda %>%
mahalanobis(., dfMVoutlier$center, dfMVoutlier$cov)
vcMVoutlier = which(dfMVoutlier > (qchisq(p = 1 - 0.001, df = ncol(iris[,1:4]))))
eda[-vcMVoutlier, ]
eda[vcMVoutlier, ]
dfMVoutlier <- eda %>% MASS::cov.mcd(., quantile.used = nrow(.)*.75)
dfMVoutlier <- eda %>%  mahalanobis(., dfMVoutlier$center, dfMVoutlier$cov)
vcMVoutlier = which(dfMVoutlier > (qchisq(p = 1 - 0.01, df = ncol(iris[,1:4]))))
eda[-vcMVoutlier, ] # w/o multivariate outliers
vcMVoutlier
## EDA - Use your brain! (https://arxiv.org/abs/1904.02101#) ------
# Data Description
eda %>% skim()
# Data validity - missing values
eda %>% na.exclude() %>%  skim()
eda %>% .[!complete.cases(.), ]
# Univariate data validity - 0s, outliers, invalid values
eda %>% dataMaid::check()
eda %>% dataMaid::visualize()
dfMVoutlier <- eda %>% MASS::cov.mcd(., quantile.used = nrow(.)*.75)
dfMVoutlier <- eda %>%  mahalanobis(., dfMVoutlier$center, dfMVoutlier$cov)
vcMVoutlier = which(dfMVoutlier > (qchisq(p = 1 - 0.001, df = ncol(iris[,1:4]))))
eda[vcMVoutlier, ] # only multivariate outliers
eda %>% dataMaid::visualize()
eda %>% dataMaid::visualize()
eda
iris %>% dataMaid::visualize()
iris %>% dataMaid::visualize()
# Bivariate data validity
eda %>% ggpairs()
library(tidyverse)
# Bivariate data validity
eda %>% ggpairs()
install.packages("GGally")
# Bivariate data validity
eda %>% GGally::ggpairs()
# Bivariate data validity
iris %>% GGally::ggpairs()
vcMVoutlier = which(dfMVoutlier > (qchisq(p = 1 - 0.01, df = ncol(iris[,1:4]))))
vcMVoutlier
vcMVoutlier = which(dfMVoutlier > (qchisq(p = 1 - 0.001, df = ncol(iris[,1:4]))))
vcMVoutlier
vcMVoutlier = which(dfMVoutlier > (qchisq(p = 1 - 0.0001, df = ncol(iris[,1:4]))))
vcMVoutlier
vcMVoutlier = which(dfMVoutlier > (qchisq(p = 1 - 0.001, df = ncol(iris[,1:4]))))
vcMVoutlier
install.packages("fastDummies")
edaQ = eda %>% fastDummies::dummy_cols()
iris %>% fastDummies::dummy_cols()
iris %>% fastDummies::dummy_cols() %>% select(is.numeric())
iris %>% fastDummies::dummy_cols() %>% select_if(is.numeric())
iris %>% fastDummies::dummy_cols() %>% select_if(is.numeric)
# Multivariate outliers = minimum covariance determinant
# https://willhipson.netlify.com/post/outliers/outliers/
# works only with quantitative data!
edaQ = eda %>% fastDummies::dummy_cols() %>% select_if(is.numeric)
# Multivariate outliers = minimum covariance determinant
# https://willhipson.netlify.com/post/outliers/outliers/
# works only with quantitative data!
edaQ = iris %>% fastDummies::dummy_cols() %>% select_if(is.numeric)
edaQ
## EDA - Use your brain! (https://arxiv.org/abs/1904.02101#) ------
# Data Description
eda %>% skim()
edaQ %>% skim()
dfMVoutlier <- edaQ %>% MASS::cov.mcd(., quantile.used = nrow(.)*.75)
# Multivariate outliers = minimum covariance determinant
# https://willhipson.netlify.com/post/outliers/outliers/
# works only with quantitative data!
edaQ = iris %>% fastDummies::dummy_cols(remove_first_dummy = T) %>% select_if(is.numeric)
dfMVoutlier <- edaQ %>% MASS::cov.mcd(., quantile.used = nrow(.)*.75)
dfMVoutlier <- edaQ %>%  mahalanobis(., dfMVoutlier$center, dfMVoutlier$cov)
vcMVoutlier = which(dfMVoutlier > (qchisq(p = 1 - 0.001, df = ncol(iris[,1:4]))))
vcMVoutlier
# Bivariate data validity
edaQ %>% GGally::ggpairs()
install.packages("janitor")
# Cleaning column names
eda = eda %>% janitor::clean_names()
eda
# Cleaning column names
eda = eda %>% as.tibble %>% janitor::clean_names()
eda
# Data Description
eda %>% skim()
# install these packages if you don't have them yet
install.packages("dataMaid")
install.packages("dataMaid")
df_eda = iris2
df_eda = iris
dfMVoutlier = df_eda %>% select_if(is.numeric) %>% MASS::cov.mcd(., quantile.used = nrow(.)*.75)
dfMVoutlier = df_eda %>% select_if(is.numeric) %>%  mahalanobis(., dfMVoutlier$center, dfMVoutlier$cov)
vcMVoutlier = which(dfMVoutlier > (qchisq(p = 1 - 0.001, df = ncol(iris[,1:4]))))
vcMVoutlier
df_eda[-vcMVoutlier, ] # w/o multivariate outliers
df_eda[vcMVoutlier, ] # only multivariate outliers
# one way to plot the multivariate outliers, correlation biplot
df_eda %>% select_if(is.numeric) %>% prcomp(center = T, scale. = T) %>%
ggbiplot::ggbiplot(circle = T)
row.names(df_eda
)
# one way to plot the multivariate outliers, correlation biplot
df_eda %>% select_if(is.numeric) %>% prcomp(center = T, scale. = T) %>%
ggbiplot::ggbiplot(circle = T, labels = rownames(df_eda) %in% as.character(vcMVoutlier))
# one way to plot the multivariate outliers, correlation biplot
df_eda %>% select_if(is.numeric) %>% prcomp(center = T, scale. = T) %>%
ggbiplot::ggbiplot(circle = T, groups = rownames(df_eda) %in% as.character(vcMVoutlier))
library(viridis)
# one way to plot the multivariate outliers, correlation biplot
df_eda %>% select_if(is.numeric) %>% prcomp(center = T, scale. = T) %>%
ggbiplot::ggbiplot(circle = T, labels = rownames(df_eda) %in% as.character(vcMVoutlier)) + + scale_fill_viridis(discrete = T)
# one way to plot the multivariate outliers, correlation biplot
df_eda %>% select_if(is.numeric) %>% prcomp(center = T, scale. = T) %>%
ggbiplot::ggbiplot(circle = T, labels = rownames(df_eda) %in% as.character(vcMVoutlier)) + scale_fill_viridis(discrete = T)
# one way to plot the multivariate outliers, correlation biplot
df_eda %>% select_if(is.numeric) %>% prcomp(center = T, scale. = T) %>%
ggbiplot::ggbiplot(circle = T, groups = rownames(df_eda) %in% as.character(vcMVoutlier)) + scale_fill_viridis(discrete = T)
# one way to plot the multivariate outliers, correlation biplot
df_eda %>% select_if(is.numeric) %>% prcomp(center = T, scale. = T) %>%
ggbiplot::ggbiplot(circle = T, groups = rownames(df_eda) %in% as.character(vcMVoutlier)) + scale_colour_viridis(discrete = T)
dfMVoutlier = df_eda %>% select_if(is.numeric) %>% MASS::cov.mcd(., quantile.used = nrow(.)*.75)
dfMVoutlier = df_eda %>% select_if(is.numeric) %>%  mahalanobis(., dfMVoutlier$center, dfMVoutlier$cov)
vcMVoutlier = which(dfMVoutlier > (qchisq(p = 1 - 0.001, df = ncol(select_if(df_eda, is.numeric))))
)
df_eda[-vcMVoutlier, ] # w/o multivariate outliers
df_eda[vcMVoutlier, ] # only multivariate outliers
# one way to plot the multivariate outliers, correlation biplot
df_eda %>% select_if(is.numeric) %>% prcomp(center = T, scale. = T) %>%
ggbiplot::ggbiplot(circle = T, groups = rownames(df_eda) %in% as.character(vcMVoutlier)) + scale_colour_viridis(discrete = T)
vcMVoutlier = which(dfMVoutlier > (qchisq(p = 1 - 0.01, df = ncol(select_if(df_eda, is.numeric)))))
# one way to plot the multivariate outliers, correlation biplot
df_eda %>% select_if(is.numeric) %>% prcomp(center = T, scale. = T) %>%
ggbiplot::ggbiplot(circle = T, groups = rownames(df_eda) %in% as.character(vcMVoutlier)) + scale_colour_viridis(discrete = T)
# Univariate data validity - 0s, outliers, invalid values
# outliers = Tukey boxplot outliers
df_eda %>% dataMaid::check()
df_eda %>% dataMaid::visualize()
dataMaid:::check()
dataMaid::check
# The line below is necessary bc dataMaid outputs graphics to a new window
dev.off()
df_eda %>% select_if(is.numeric) %>%
dataMaid::check(checks = setChecks(numeric = "identifyOutliers"))
df_eda %>% select_if(is.numeric) %>%
dataMaid::check(checks = dataMaid::setChecks(numeric = "identifyOutliers"))
vcMVoutlier = which(dfMVoutlier > (qchisq(p = 1 - 0.001, df = ncol(select_if(df_eda, is.numeric)))))
# one way to plot the multivariate outliers, correlation biplot
df_eda %>% select_if(is.numeric) %>% prcomp(center = T, scale. = T) %>%
ggbiplot::ggbiplot(circle = T, groups = rownames(df_eda) %in% as.character(vcMVoutlier)) +
scale_colour_viridis(discrete = T)
